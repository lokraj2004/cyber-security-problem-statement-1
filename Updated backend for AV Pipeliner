import time
import os
import subprocess
import psutil
import shutil
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import logging

#  VM Configuration with user kamesh
VM_NAME = "kamesh10"  # Replace with your VM name
GUEST_USERNAME = "Kamesh 10"  # Replace with the VM's username
GUEST_PASSWORD = "050705"  # Replace with the VM's password
PYTHON_FILE_PATH_IN_VM = "C:/Users/Kamesh 10/Documents/avast cmd.py"  # Path of the Python file in the VM

# Replace with the path you want to monitor
folder_to_monitor = "C:/Users/kamesh R/OneDrive/Music" 
# Specify the destination folder for moving files
destination_folder = "C:/Users/kamesh R/Downloads/clear files"

# Set up logging to log detected files
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s',
                    handlers=[logging.FileHandler("file_monitor.log"), logging.StreamHandler()])

applications_to_check = ["notepad.exe", "calc.exe", "WINWORD.EXE", "EXCEL.EXE","explorer.exe","msedge.exe"]

# Function to check for open applications
def check_open_applications():
    open_apps = []
    for process in psutil.process_iter(['name']):
        if process.info['name'] in applications_to_check:
            open_apps.append(process.info['name'])
    return open_apps

# Check if any specified applications are open
open_apps = check_open_applications()

if open_apps:
    print("The following applications are open in the background:")
    for app in open_apps:
        print(f"- {app}")
    print("Please close these applications to proceed.")
else:
    print("No specified applications are open in the background.")

    # tab checker closed
def move_file(src_path, dest_folder):
    time.sleep(10)  # Adding delay for file moving
    """
    Move a file from the target folder to a destination folder.
    """
    # Check if file exists
    if os.path.isfile(src_path):
        # Ensure destination folder exists
        os.makedirs(dest_folder, exist_ok=True)

        # Move the file
        dest_path = os.path.join(dest_folder, os.path.basename(src_path))
        shutil.move(src_path, dest_path)
        logging.info(f"File moved from {src_path} to {dest_path}")
    else:
        logging.warning(f"File not found: {src_path}")


def run_command(command):
    """Run a shell command and return its output and error."""
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    return result.stdout, result.stderr

def start_vm_if_needed():
    """Start the VM if itâ€™s not already running."""
    print(f"Checking if VM: {VM_NAME} is running")
    output, _ = run_command(f"VBoxManage showvminfo \"{VM_NAME}\" --machinereadable")
    if "VMState=\"running\"" not in output:
        print(f"Starting VM: {VM_NAME} with GUI mode")
        run_command(f"VBoxManage startvm \"{VM_NAME}\" --type gui")
        time.sleep(20)  # Adjust based on VM boot time
    else:
        print(f"VM: {VM_NAME} is already running")

def run_python_file_in_vm():
    """Run a Python file within the VM by calling it through cmd.exe."""
    command = (
        f"VBoxManage guestcontrol \"{VM_NAME}\" run "
        f"--username \"{GUEST_USERNAME}\" --password \"{GUEST_PASSWORD}\" "
        f"--exe \"cmd.exe\" -- "
        f"--wait-stdout --wait-stderr "
        f"/c \"{PYTHON_FILE_PATH_IN_VM}\""
    )
    print(f"Running Python file: {PYTHON_FILE_PATH_IN_VM} in VM: {VM_NAME} using cmd.exe")
    stdout, stderr = run_command(command)
    if stderr:
        print(f"Error: {stderr}")
    else:
        print(f"Output: {stdout}")

def main():
    # Start the VM if not already running
    start_vm_if_needed()

    # Run the Python file in the VM using cmd.exe
    run_python_file_in_vm()


def scan_with_windows_defender(folder_path):
    """
    Scans the specified folder using Windows Defender and retrieves the result.

    Args:
        folder_path (str): The path to the folder to be scanned.

    Returns:
        str: Scan result.
    """
    # Path to the Windows Defender command-line tool
    defender_path = r"C:\Program Files\Windows Defender\MpCmdRun.exe"

    # Check if the Windows Defender tool exists
    if not os.path.exists(defender_path):
        return "Windows Defender command-line tool not found."

    if _name_ == "_main_":
        main()
        # Command to run Windows Defender scan on the specified folder
        scan_command = [defender_path, "-Scan", "-ScanType", "3", "-File", folder_path]




    try:
        # Run the scan command
        result = subprocess.run(scan_command, capture_output=True, text=True, check=True)

        # Capture and print output
        output = result.stdout
        return f"Scan completed. Output:\n{output}"

    except subprocess.CalledProcessError as e:
        return f"Error during scan: {e.output}"






class NewFileHandler(FileSystemEventHandler):
    def _init_(self, dest_folder):
        self.dest_folder = dest_folder

    def on_created(self, event):
        if not event.is_directory:
            # Store the path and filename
            file_location = event.src_path
            logging.info(f"New file detected: {file_location}")

            folder_to_scan =folder_to_monitor
            scan_result = scan_with_windows_defender(folder_to_scan)
            print(scan_result)

            # Move the detected file to the destination folder
            move_file(file_location, self.dest_folder)


def monitor_folder(path_to_watch, destination_folder):
    event_handler = NewFileHandler(destination_folder)
    observer = Observer()
    observer.schedule(event_handler, path_to_watch, recursive=False)
    observer.start()
    logging.info(f"Monitoring folder: {path_to_watch}")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()




# Start monitoring and moving files
monitor_folder(folder_to_monitor, destination_folder)
